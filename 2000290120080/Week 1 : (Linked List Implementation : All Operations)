1: Singly Linked List Implementation

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None


class SinglyLinkedList:
    def __init__(self):
        self.head = None

    def is_empty(self):
        return self.head is None

    def size(self):
        count = 0
        current = self.head
        while current:
            count += 1
            current = current.next
        return count

    def insert_at_beginning(self, data):
        new_node = Node(data)
        new_node.next = self.head
        self.head = new_node

    def insert_at_end(self, data):
        new_node = Node(data)
        if not self.head:
            self.head = new_node
        else:
            current = self.head
            while current.next:
                current = current.next
            current.next = new_node

    def delete(self, key):
        if not self.head:
            return

        if self.head.data == key:
            self.head = self.head.next
            return

        current = self.head
        prev = None
        while current and current.data != key:
            prev = current
            current = current.next

        if current:
            prev.next = current.next

    def search(self, key):
        current = self.head
        while current:
            if current.data == key:
                return True
            current = current.next
        return False

    def display(self):
        current = self.head
        elements = []
        while current:
            elements.append(current.data)
            current = current.next
        print("Singly Linked List:", elements)


# Example usage:
singly_linked_list = SinglyLinkedList()

singly_linked_list.insert_at_beginning(3)
singly_linked_list.insert_at_beginning(2)
singly_linked_list.insert_at_beginning(1)

singly_linked_list.insert_at_end(4)
singly_linked_list.insert_at_end(5)

singly_linked_list.display()  # Output: Singly Linked List: [1, 2, 3, 4, 5]

print("Size:", singly_linked_list.size())  # Output: Size: 5

print("Is Empty:", singly_linked_list.is_empty())  # Output: Is Empty: False

singly_linked_list.delete(3)
singly_linked_list.display()  # Output: Singly Linked List: [1, 2, 4, 5]

print("Search 2:", singly_linked_list.search(2))  # Output: Search 2: True
print("Search 6:", singly_linked_list.search(6))  # Output: Search 6: False


2: Doubly Linked List Implementation

class Node:
    def __init__(self, data):
        self.data = data
        self.prev = None
        self.next = None


class DoublyLinkedList:
    def __init__(self):
        self.head = None

    def is_empty(self):
        return self.head is None

    def size(self):
        count = 0
        current = self.head
        while current:
            count += 1
            current = current.next
        return count

    def insert_at_beginning(self, data):
        new_node = Node(data)
        if self.head:
            self.head.prev = new_node
        new_node.next = self.head
        self.head = new_node

    def insert_at_end(self, data):
        new_node = Node(data)
        if not self.head:
            self.head = new_node
        else:
            current = self.head
            while current.next:
                current = current.next
            current.next = new_node
            new_node.prev = current

    def delete(self, key):
        if not self.head:
            return

        if self.head.data == key:
            self.head = self.head.next
            if self.head:
                self.head.prev = None
            return

        current = self.head
        while current and current.data != key:
            current = current.next

        if current:
            prev_node = current.prev
            next_node = current.next
            if prev_node:
                prev_node.next = next_node
            if next_node:
                next_node.prev = prev_node

    def search(self, key):
        current = self.head
        while current:
            if current.data == key:
                return True
            current = current.next
        return False

    def display(self):
        current = self.head
        elements = []
        while current:
            elements.append(current.data)
            current = current.next
        print("Doubly Linked List:", elements)


# Example usage:
doubly_linked_list = DoublyLinkedList()

doubly_linked_list.insert_at_beginning(3)
doubly_linked_list.insert_at_beginning(2)
doubly_linked_list.insert_at_beginning(1)

doubly_linked_list.insert_at_end(4)
doubly_linked_list.insert_at_end(5)

doubly_linked_list.display()  # Output: Doubly Linked List: [1, 2, 3, 4, 5]

print("Size:", doubly_linked_list.size())  # Output: Size: 5

print("Is Empty:", doubly_linked_list.is_empty())  # Output: Is Empty: False

doubly_linked_list.delete(3)
doubly_linked_list.display()  # Output: Doubly Linked List: [1, 2, 4, 5]

print("Search 2:", doubly_linked_list.search(2))  # Output: Search 2: True
print("Search 6:", doubly_linked_list.search(6))  # Output: Search 6: False


3. Circular Linked List

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None


class CircularLinkedList:
    def __init__(self):
        self.head = None

    def is_empty(self):
        return self.head is None

    def size(self):
        if not self.head:
            return 0
        count = 1
        current = self.head.next
        while current != self.head:
            count += 1
            current = current.next
        return count

    def insert_at_beginning(self, data):
        new_node = Node(data)
        if not self.head:
            self.head = new_node
            new_node.next = new_node
        else:
            new_node.next = self.head
            current = self.head
            while current.next != self.head:
                current = current.next
            current.next = new_node
            self.head = new_node

    def insert_at_end(self, data):
        new_node = Node(data)
        if not self.head:
            self.head = new_node
            new_node.next = new_node
        else:
            current = self.head
            while current.next != self.head:
                current = current.next
            current.next = new_node
            new_node.next = self.head

    def delete(self, key):
        if not self.head:
            return

        if self.head.data == key:
            current
