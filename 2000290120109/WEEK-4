
// IMPLEMENTATION OF 0-1 KNAPSACK

#include <iostream>
#include <vector>

using namespace std;

// Function to find the maximum of two integers
int max(int a, int b) {
    return (a > b) ? a : b;
}

int knapsack(int cap, vector<int>& weights, vector<int>& values, int n) {
    vector<vector<int>> dp(n + 1, vector<int>(cap + 1, 0));

    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= cap; j++) {
            if (weights[i - 1] <= j) {
                dp[i][j] = max(values[i - 1] + dp[i - 1][j - weights[i - 1]], dp[i - 1][j]);
            } else {
                dp[i][j] = dp[i - 1][j];
            }
        }
    }

    return dp[n][cap];
}

int main() {
    int cap;
    cin>>cap;
    vector<int> weights = {4, 5, 6, 7};
    vector<int> values = {5, 6, 7, 8};
    int n = weights.size();

    int maxValue = knapsack(cap, weights, values, n);
    cout << "Maximum value that can be obtained: " << maxValue << endl;

    return 0;
}

// IMPLEMENTATION OF LONGEST COMMON SUBSEQUENCE

#include <iostream>
#include <vector>
#include <string>

using namespace std;

int longestCommonSubsequence(string t1, string t2) {
    int m = t1.size();
    int n = t2.size();

    // Create a 2D DP table to store the LCS lengths
    vector<vector<int>> dp(m + 1, vector<int>(n + 1, 0));

    for (int i = 1; i <= m; i++) {
        for (int j = 1; j <= n; j++) {
            if (t1[i - 1] == t2[j - 1]) {
                dp[i][j] = 1 + dp[i - 1][j - 1];
            } else {
                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);
            }
        }
    }

    return dp[m][n];
}

int main() {
    string t1 = "ABFGEJ";
    string t2 = "AEDFHR";

    int result = longestCommonSubsequence(t1, t2);
    cout << "Length of Longest Common Subsequence: " << result << endl;

    return 0;
}

// IMPLEMENTATION OF MATRIX CHAIN MULTIPLICATION

#include <iostream>
#include <vector>

using namespace std;

int matrixChainMultiplication(vector<int>& dem) {
    int n = dem.size();
    vector<vector<int>> dp(n, vector<int>(n, 0));

    // Chain length is 1, cost is 0 (no multiplication needed)
    for (int i = 1; i < n; i++) {
        dp[i][i] = 0;
    }

    for (int cLen = 2; cLen < n; cLen++) {
        for (int i = 1; i < n - cLen + 1; i++) {
            int j = i + cLen - 1;
            dp[i][j] = INT_MAX;

            for (int k = i; k < j; k++) {
                int cost = dp[i][k] + dp[k + 1][j] + dem[i - 1] * dem[k] * dem[j];
                dp[i][j] = min(dp[i][j], cost);
            }
        }
    }

    return dp[1][n - 1];
}

int main() {
    vector<int> dem = {20, 40, 5, 60};
    int result = matrixChainMultiplication(dem);
    cout << "Minimum number of scalar multiplications: " << result << endl;

    return 0;
}

// IMPLEMENTATION OF UNBOUNDED KNAPSACK

#include <iostream>
#include <vector>

using namespace std;

int max(int a, int b) {
    return (a > b) ? a : b;
}

int unboundedKnapsack(int cap, vector<int>& w, vector<int>& values) {
    int n = w.size();

    vector<int> dp(cap + 1, 0);

    for (int j = 1; j <= cap; j++) {
        for (int i = 0; i < n; i++) {
            if (weights[i] <= j) {
                dp[j] = max(dp[j], dp[j - w[i]] + values[i]);
            }
        }
    }

    return dp[cap];
}

int main() {
    int cap;
    cin>>cap;
    vector<int> w = {6, 7, 8, 9};
    vector<int> values = {7, 3, 6, 9};

    int maxValue = unboundedKnapsack(cap, w, values);
    cout << "Maximum value that can be obtained: " << maxValue << endl;

    return 0;
}

// IMPLEMENTATION OF LONGEST INCREASING SUBSEQUENCE

#include <iostream>
#include <vector>

using namespace std;

int longestIncreasingSubsequence(vector<int>& arr) {
    int n = arr.size();
    vector<int> dp(n, 1);

    for (int i = 1; i < n; i++) {
        for (int j = 0; j < i; j++) {
            if (arr[i] > arr[j]) {
                dp[i] = max(dp[i], dp[j] + 1);
            }
        }
    }

    int maxLen = 0;
    for (int i = 0; i < n; i++) {
        maxLen = max(maxLen, dp[i]);
    }

    return maxLen;
}

int main() {
    vector<int> arr = {64, 2, 56, 18, 91, 50, 86, 33, 88};
    int result = longestIncreasingSubsequence(nums);
    cout << "Length of Longest Increasing Subsequence: " << result << endl;

    return 0;
}
/ STRIVER'S SHEET

// COIN CHANGE

#include <iostream>
#include <vector>

using namespace std;

long countWaysToMakeChange(vector<int>& coins, int target) {
    int n = coins.size();
    vector<long> dp(target + 1, 0);
    dp[0] = 1; 

    for (int i = 0; i < n; i++) {
        for (int t = coins[i]; t <= target; t++) {
            dp[t] += dp[t - coins[i]];
        }
    }

    return dp[target];
}

int main() {
    vector<int> coins = {5, 6, 8};
    int target = 9;

    cout << "The total number of ways is " << countWaysToMakeChange(coins, target) << endl;

    return 0;
}

// EDIT-DISTANCE

#include <iostream>
#include <vector>
using namespace std;

int min(int x, int y, int z) {
    return min(min(x, y), z);
}

int editDist(string str1, string str2) {
    int m = str1.length();
    int n = str2.length();

    vector<vector<int>> dp(m + 1, vector<int>(n + 1, 0));

    for (int i = 0; i <= m; i++) {
        for (int j = 0; j <= n; j++) {
            if (i == 0)
                dp[i][j] = j;

            else if (j == 0)
                dp[i][j] = i;

            else if (str1[i - 1] == str2[j - 1])
                dp[i][j] = dp[i - 1][j - 1];
            else
                dp[i][j] = 1 + min(dp[i][j - 1], // Insert
                                dp[i - 1][j],    // Remove
                                dp[i - 1][j - 1] // Replace
                            );
        }
    }

    return dp[m][n];
}

int main() {
    string str1 = "march";
    string str2 = "november";

    cout << "Minimum number of operations to convert '"
         << str1 << "' to '" << str2 << "' is " << editDist(str1, str2) << endl;

    return 0;
}

// MAXIMUM PRODUCT SUBARRAY

#include <iostream>
using namespace std;

int maxSubarrayProduct(int arr[], int n) {
    int maxEnding = arr[0];
    int minEnding = arr[0];

    int maxProduct = arr[0];

    for (int i = 1; i < n; i++) {
        if (arr[i] < 0) {
            swap(maxEnding, minEnding);
        }

        maxEnding = max(arr[i], maxEnding * arr[i]);
        minEnding = min(arr[i], minEnding * arr[i]);

        maxProduct = max(maxProduct, maxEnding);
    }

    return maxProduct;
}

int main() {
    int arr[] = {5, -2, 8, 7, 2, 9, -3};
    int n = sizeof(arr) / sizeof(arr[0]);
    cout << "Maximum Subarray product is " << maxSubarrayProduct(arr, n);
    return 0;
}

