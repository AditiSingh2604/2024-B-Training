// Queue 


public class Queue {
    private int[] items;
    private int front;
    private int rear;
    private int size;

    public Queue(int capacity) {
        items = new int[capacity];
        front = 0;
        rear = -1;
        size = 0;
    }

    public boolean isEmpty() {
        return size == 0;
    }

    public boolean isFull() {
        return size == items.length;
    }

    public void enqueue(int item) {
        if (isFull()) {
            System.out.println("Queue is full. Unable to enqueue item.");
            return;
        }
        rear = (rear + 1) % items.length;
        items[rear] = item;
        size++;
    }

    public int dequeue() {
        if (isEmpty()) {
            System.out.println("Queue is empty. Unable to dequeue item.");
            return -1; // Return a default value or throw an exception
        }
        int item = items[front];
        front = (front + 1) % items.length;
        size--;
        return item;
    }

    public static void main(String[] args) {
        Queue queue = new Queue(5);
        queue.enqueue(10);
        queue.enqueue(20);
        queue.enqueue(30);

        System.out.println(queue.dequeue()); 
        System.out.println(queue.dequeue()); 

        queue.enqueue(40);
        queue.enqueue(50);

        System.out.println(queue.dequeue());
        System.out.println(queue.dequeue()); 
        System.out.println(queue.dequeue());
        System.out.println(queue.dequeue()); 
    }
}

// Stack 

public class Stack<T> {
    private int maxSize;
    private T[] stackArray;
    private int top;

    public Stack(int size) {
        maxSize = size;
        stackArray = (T[]) new Object[maxSize];
        top = -1;
    }

    public void push(T item) {
        if (isFull()) {
            throw new IllegalStateException("Stack is full. Cannot push item.");
        }
        stackArray[++top] = item;
    }

    public T pop() {
        if (isEmpty()) {
            throw new IllegalStateException("Stack is empty. Cannot pop item.");
        }
        return stackArray[top--];
    }

    public T peek() {
        if (isEmpty()) {
            throw new IllegalStateException("Stack is empty. Cannot peek item.");
        }
        return stackArray[top];
    }

    public boolean isEmpty() {
        return (top == -1);
    }

    public boolean isFull() {
        return (top == maxSize - 1);
    }

    public int size() {
        return top + 1;
    }
}
