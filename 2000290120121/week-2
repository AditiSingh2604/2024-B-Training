//Striver SDE Sheet
//Implement Stack using Queues
class MyStack {
public:
    queue<int>q;
    MyStack() {   
    }
    void push(int x) {
        q.push(x);
        for(int i=0;i<q.size()-1;i++){
            q.push(q.front());
            q.pop();
        }   
    }
    int pop() {
        int n=q.front();
        q.pop();
        return n;   
    }
    int top() {
        return q.front();
    }
    bool empty() {
        if(q.empty()){
            return true;
        }
        return false;
    }
};

// Valid Parentheses
class Solution {
public:
    bool isValid(string s) {
        stack<char>st;
        for(auto i: s){
            if(i=='('||i=='['||i=='{'){
                st.push(i);
            }else{
                if(st.size()==0){
                    return false;
                }else{
                    char ch=st.top();
                    st.pop();
                    if((i==')'&& ch=='(')||(i=='}'&&ch=='{')||(i==']'&&ch=='[')){
                        continue;
                    }else{
                        return false;
                    }
                }
            }
        }
        return st.empty();
    }
};

// Next Greater Element I
class Solution {
public:
    vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) {
     vector<int> result;
    int n = nums2.size();

    for (int num1 : nums1) {
        int index =find(nums2.begin(), nums2.end(), num1) - nums2.begin();
        int nextGreater = -1;

        for (int i = index + 1; i < n; i++) {
            if (nums2[i] > num1) {
                nextGreater = nums2[i];
                break;
            }
        }
        result.push_back(nextGreater);
    }
    return result;
    }
};

// Min Stack
class MinStack {
    stack<pair<int,int>>st;
public:
    MinStack() {
       
        
    }
    
    void push(int val) {
        int mn;
        if(st.empty()){
            mn=val;
        }else{
             mn=min(st.top().second,val);
            
        }
        st.push({val,mn});
    }
    
    void pop() {
        if(!st.empty()){
        st.pop();
        } 
    }
    
    int top() {
        if(st.empty()){
           return 0;}else{
        return st.top().first;
        }   
    }
    
    int getMin() {
        return st.top().second;
        
    }
};

// Stack Implementation:
#include <iostream>
#include <stack>

using namespace std;

int main() {
    stack<int> myStack;

    // Push elements onto the stack
    myStack.push(34);
    myStack.push(56);
    myStack.push(78);

    // Check if the stack is empty
    if (myStack.empty()) {
        cout << "Stack is empty!" << endl;
    } else {
        cout << "Stack is not empty." << endl;
    }

    // Get the top element of the stack
    cout << "Top element: " << myStack.top() << endl;

    // Pop elements from the stack
    while (!myStack.empty()) {
        cout << "Popped element: " << myStack.top() << endl;
        myStack.pop();
    }

    return 0;
}

// Queue Implementation:
#include <iostream>
#include <queue>

using namespace std;

int main() {
    queue<int> myQueue;

    // Enqueue elements into the queue
    myQueue.push(24);
    myQueue.push(55);
    myQueue.push(67);

    // Check if the queue is empty
    if (myQueue.empty()) {
        cout << "Queue is empty!" << endl;
    } else {
        cout << "Queue is not empty." << endl;
    }

    // Get the front element of the queue
    cout << "Front element: " << myQueue.front() << endl;

    // Dequeue elements from the queue
    while (!myQueue.empty()) {
        cout << "Dequeued element: " << myQueue.front() << endl;
        myQueue.pop();
    }

    return 0;
}
