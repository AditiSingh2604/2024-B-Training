// VALIDATE BST

#include <iostream>
#include <limits>

struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;

    TreeNode(int val) : val(val), left(nullptr), right(nullptr) {}
};

// Function to insert a new node into a BST
TreeNode* insert(TreeNode* root, int val) {
    if (root == nullptr) {
        return new TreeNode(val);
    }

    if (val < root->val) {
        root->left = insert(root->left, val);
    } else if (val > root->val) {
        root->right = insert(root->right, val);
    }

    return root;
}

// Function to validate if the binary tree is a BST
bool isValidBSTUtil(TreeNode* root, long long minVal, long long maxVal) {
    if (root == nullptr) {
        return true;
    }

    if (root->val <= minVal || root->val >= maxVal) {
        return false;
    }

    return isValidBSTUtil(root->left, minVal, root->val) &&
           isValidBSTUtil(root->right, root->val, maxVal);
}

bool isValidBST(TreeNode* root) {
    return isValidBSTUtil(root, std::numeric_limits<long long>::min(), std::numeric_limits<long long>::max());
}

// Function to delete the binary tree to avoid memory leaks
void deleteTree(TreeNode* root) {
    if (root == nullptr) {
        return;
    }

    deleteTree(root->left);
    deleteTree(root->right);
    delete root;
}

int main() {
    TreeNode* root = nullptr;
    int n, val;

    std::cout << "Enter the number of elements in the BST: ";
    std::cin >> n;

    std::cout << "Enter the elements of the BST: ";
    for (int i = 0; i < n; ++i) {
        std::cin >> val;
        root = insert(root, val);
    }

    if (isValidBST(root)) {
        std::cout << "The given binary tree is a valid BST." << std::endl;
    } else {
        std::cout << "The given binary tree is not a valid BST." << std::endl;
    }

    // Delete the binary tree to release memory
    deleteTree(root);

    return 0;
}


// POST ORDER TRAVERSAL

#include <iostream>

using namespace std;
struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;

    TreeNode(int val) : val(val), left(nullptr), right(nullptr) {}
};

TreeNode* buildTree() {
    int val;
    cout << "Enter the node value (or -1 for null): ";
    cin >> val;

    if (val == -1) {
        return nullptr;
    }

    TreeNode* root = new TreeNode(val);
    root->left = buildTree();
    root->right = buildTree();

    return root;
}
// post order traversal in binary tree
void postorderTraversal(TreeNode* root) {
    if (root == nullptr) {
        return;
    }

    postorderTraversal(root->left);
    postorderTraversal(root->right);
    cout << root->val << " ";
}

void deleteTree(TreeNode* root) {
    if (root == nullptr) {
        return;
    }

    deleteTree(root->left);
    deleteTree(root->right);
    delete root;
}

int main() {
    TreeNode* root = buildTree();

    cout << "Postorder Traversal: ";
    postorderTraversal(root);
    cout << endl;

    // Delete the binary tree to release memory
    deleteTree(root);

    return 0;
}

// PRE ORDER TRAVERSAL

#include <iostream>

using namespace std;
struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;

    TreeNode(int val) : val(val), left(nullptr), right(nullptr) {}
};

TreeNode* buildTree() {
    int val;
    cout << "Enter the node value (or -1 for null): ";
    cin >> val;

    if (val == -1) {
        return nullptr;
    }

    TreeNode* root = new TreeNode(val);
    root->left = buildTree();
    root->right = buildTree();

    return root;
}

// Function to perform preorder traversal of the binary tree
void preorderTraversal(TreeNode* root) {
    if (root == nullptr) {
        return;
    }
cout << root->val << " ";
    preorderTraversal(root->left);
    preorderTraversal(root->right);
}

// Function to delete the binary tree to avoid memory leaks
void deleteTree(TreeNode* root) {
    if (root == nullptr) {
        return;
    }

    deleteTree(root->left);
    deleteTree(root->right);
    delete root;
}

int main() {
    TreeNode* root = buildTree();

    cout << "Preorder Traversal: ";
    preorderTraversal(root);
    cout << endl;

    // Delete the binary tree to release memory
    deleteTree(root);

    return 0;
}

// INORDER TRAVERSAL

#include <iostream>

using namespace std;
struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;

    TreeNode(int val) : val(val), left(nullptr), right(nullptr) {}
};

TreeNode* buildTree() {
    int val;
    cout << "Enter the node value (or -1 for null): ";
    cin >> val;

    if (val == -1) {
        return nullptr;
    }

    TreeNode* root = new TreeNode(val);
    root->left = buildTree();
    root->right = buildTree();

    return root;
}

// Function to perform inorder traversal of the binary tree
void inorderTraversal(TreeNode* root) {
    if (root == nullptr) {
        return;
    }
inorderTraversal(root->left);
    cout << root->val << " ";
    inorderTraversal(root->right);
}

// Function to delete the binary tree to avoid memory leaks
void deleteTree(TreeNode* root) {
    if (root == nullptr) {
        return;
    }

    deleteTree(root->left);
    deleteTree(root->right);
    delete root;
}

int main() {
    TreeNode* root = buildTree();

    cout << "Inorder Traversal: ";
    inorderTraversal(root);
    cout << endl;

    // Delete the binary tree to release memory
    deleteTree(root);

    return 0;
}

// Depth-First Search (DFS) implementation

#include <iostream>
#include <vector>
#include <unordered_set>

using namespace std;

// Function to perform DFS traversal on a graph
void dfs(int node, const vector<vector<int>>& adjList, vector<bool>& visited) {
    cout << node << " ";
    visited[node] = true;

    for (int neighbor : adjList[node]) {
        if (!visited[neighbor]) {
            dfs(neighbor, adjList, visited);
        }
    }
}

// Function to add an edge to the graph
void addEdge(vector<vector<int>>& adjList, int u, int v) {
    adjList[u].push_back(v);
    adjList[v].push_back(u);
}

// Function to delete the graph to avoid memory leaks
void deleteGraph(vector<vector<int>>& adjList) {
    for (auto& vec : adjList) {
        vec.clear();
    }
}
int main() {
    int numNodes, numEdges;
    cout << "Enter the number of nodes and edges: ";
    cin >> numNodes >> numEdges;

    vector<vector<int>> adjList(numNodes + 1);
    int u, v;
    cout << "Enter the edges (node1 node2): ";
    for (int i = 0; i < numEdges; ++i) {
        cin >> u >> v;
        addEdge(adjList, u, v);
    }

    int startNode;
    cout << "Enter the starting node for DFS traversal: ";
    cin >> startNode;

    vector<bool> visited(numNodes + 1, false);
    cout << "DFS traversal starting from node " << startNode << ": ";
    dfs(startNode, adjList, visited);
    cout << endl;

    // Delete the graph to release memory
    deleteGraph(adjList);

    return 0;
}

// Breadth-First Search (BFS) implemenattion

#include <iostream>
#include <vector>
#include <unordered_set>

using namespace std;

// Function to add an edge to the graph
void addEdge(vector<vector<int>>& adjList, int u, int v) {
    adjList[u].push_back(v);
    adjList[v].push_back(u);
}

// Function to perform BFS traversal on a graph iteratively
void bfsIterative(int startNode, const vector<vector<int>>& adjList, vector<bool>& visited) {
    vector<int> queue;
    int front = 0, rear = 0;

    queue.push_back(startNode);
    visited[startNode] = true;

    while (front <= rear) {
        int current = queue[front++];
        cout << current << " ";

        for (int neighbor : adjList[current]) {
            if (!visited[neighbor]) {
                queue.push_back(neighbor);
                visited[neighbor] = true;
                rear++;
            }
        }
    }
}

// Function to delete the graph to avoid memory leaks
void deleteGraph(vector<vector<int>>& adjList) {
    for (auto& vec : adjList) {
        vec.clear();
    }
}

int main() {
    int numNodes, numEdges;
    cout << "Enter the number of nodes and edges: ";
    cin >> numNodes >> numEdges;

    vector<vector<int>> adjList(numNodes + 1);
    int u, v;
    cout << "Enter the edges (node1 node2): ";
    for (int i = 0; i < numEdges; ++i) {
        cin >> u >> v;
        addEdge(adjList, u, v);
    }

    int startNode;
    cout << "Enter the starting node for BFS traversal: ";
    cin >> startNode;

    vector<bool> visited(numNodes + 1, false);
    cout << "BFS traversal starting from node " << startNode << ": ";
    bfsIterative(startNode, adjList, visited);
    cout << endl;

    // Delete the graph to release memory
    deleteGraph(adjList);

    return 0;
}

//Level Order Traversal in binary tree

#include <iostream>

using namespace std;

// Definition for a binary tree node
struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;

    TreeNode(int val) : val(val), left(nullptr), right(nullptr) {}
};

// Function to build a binary tree from user input
TreeNode* buildTree() {
    int val;
    cout << "Enter the node value (or -1 for null): ";
    cin >> val;

    if (val == -1) {
        return nullptr;
    }

    TreeNode* root = new TreeNode(val);
    root->left = buildTree();
    root->right = buildTree();

    return root;
}

// Function to perform level order traversal of the binary tree
void levelOrderTraversal(TreeNode* root) {
    if (root == nullptr) {
        return;
    }

    int height = getHeight(root);

    for (int level = 1; level <= height; ++level) {
        printLevel(root, level);
    }
}

// Function to get the height of the binary tree
int getHeight(TreeNode* root) {
    if (root == nullptr) {
        return 0;
    }

    int leftHeight = getHeight(root->left);
    int rightHeight = getHeight(root->right);

    return max(leftHeight, rightHeight) + 1;
}

// Function to print nodes at a given level
void printLevel(TreeNode* root, int level) {
    if (root == nullptr) {
        return;
    }

    if (level == 1) {
        cout << root->val << " ";
    } else if (level > 1) {
        printLevel(root->left, level - 1);
        printLevel(root->right, level - 1);
    }
}

// Function to delete the binary tree to avoid memory leaks
void deleteTree(TreeNode* root) {
    if (root == nullptr) {
        return;
    }
    deleteTree(root->left);
    deleteTree(root->right);
    delete root;
}

int main() {
    TreeNode* root = buildTree();

    cout << "Level Order Traversal: ";
    levelOrderTraversal(root);
    cout << endl;

    // Delete the binary tree to release memory
    deleteTree(root);

    return 0;
}
