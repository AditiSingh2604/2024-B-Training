//Implement Stack using Queue
class MyStack {
    Queue<Integer> q;
    int top=0;

    public MyStack() {
        q = new LinkedList<>();
    }
    
    public void push(int x) {
        q.offer(x);
        top = x;
    }
    
    public int pop() {
        int s = q.size();
        while(s-->2)
        q.offer(q.poll());

        top = q.peek();
        q.offer(q.poll());
        return q.poll();
    }
    
    public int top() {
        return top;
    }
    
    public boolean empty() {
        return q.isEmpty();
    }
}

/**
 * Your MyStack object will be instantiated and called as such:
 * MyStack obj = new MyStack();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.top();
 * boolean param_4 = obj.empty();
 */

// Implement Queue Using stack
class MyQueue {
    public Stack<Integer> stk1 = new Stack<>();
    public Stack<Integer> stk2 = new Stack<>();

    public MyQueue() {
        
    }
    
    public void push(int x) {
        while(!stk1.isEmpty())
        {
            stk2.push(stk1.pop());
        }
        stk1.push(x);
        while(!stk2.isEmpty())
        {
            stk1.push(stk2.pop());
        }
    }
    
    public int pop() {
        if(!stk1.isEmpty())
        {
            return stk1.pop();
        }
        return -1;
    }
    
    public int peek() {
        if(!stk1.isEmpty())
        {
            return stk1.peek();
        }
        return -1;
    }
    
    public boolean empty() {
        return stk1.isEmpty();
    }
}

/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue obj = new MyQueue();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.peek();
 * boolean param_4 = obj.empty();
 */

//Check for Balanced Paranthesis
class Solution {
    public boolean isValid(String s) {
        Stack<Character> st = new Stack<>();
        int count = 0;
        for(int i=0; i<s.length(); i++){
            char ch = s.charAt(i);
            if(st.size() == 0){
            if(ch == ')' || ch == '}' || ch == ']'){
              count++;
              break;
            }
            }
            if(ch == '(' || ch == '{'  || ch == '['){
                st.push(ch);
            }
                else if(ch == ')'){
                    if(st.peek() == '(')
                    st.pop();
                    else return false;
                }
                else if(ch == '}'){
                    if(st.peek() == '{')
                    st.pop();
                    else return false;
                }
                else if(ch == ']'){
                    if(st.peek() == '[')
                    st.pop();
                    else return false;
                }
        }
            if(st.size() == 0 && count==0){
                return true;
            }
            else{
                return false;
            }
        
    }
}

//Next Grater Element 1
class Solution {
    public boolean isValid(String s) {
        Stack<Character> st = new Stack<>();
        int count = 0;
        for(int i=0; i<s.length(); i++){
            char ch = s.charAt(i);
            if(st.size() == 0){
            if(ch == ')' || ch == '}' || ch == ']'){
              count++;
              break;
            }
            }
            if(ch == '(' || ch == '{'  || ch == '['){
                st.push(ch);
            }
                else if(ch == ')'){
                    if(st.peek() == '(')
                    st.pop();
                    else return false;
                }
                else if(ch == '}'){
                    if(st.peek() == '{')
                    st.pop();
                    else return false;
                }
                else if(ch == ']'){
                    if(st.peek() == '[')
                    st.pop();
                    else return false;
                }
        }
            if(st.size() == 0 && count==0){
                return true;
            }
            else{
                return false;
            }
        
    }
}

//Next Greater Element2
class Solution {
    public int[] nextGreaterElements(int[] nums) {
        int nge[] = new int[nums.length];
        Stack<Integer> st = new Stack<>();
        st.push(nums[nums.length - 1]);
        nge[nums.length-1] = -1;
        for(int i= nums.length-2; i>=0; i--){
            while(st.size()>0 && nums[i]>=st.peek())
            {
                st.pop();
            }
            if(st.size() == 0){
                nge[i] = -1;
            }
            else{
                nge[i] = st.peek();
            }
            st.push(nums[i]);
        }
        return nge;
        
    }
}

//Largest rectangle in a histogram
class Solution {
    public int largestRectangleArea(int[] heights) {
        int ps[]=previousSmaller(heights);
        int ns[]=nextSmaller(heights);

        // for(int i=0;i<heights.length;i++){
        //     System.out.println(ps[i]+" "+ns[i]);
        // }

        int maxArea=0;
        for(int i=0;i<heights.length;i++){
            int area=((ns[i]-ps[i]-1)*heights[i]);
            // System.out.println(area);
            maxArea=Math.max(maxArea,area);
        }
        return maxArea;
    }

    public int[] previousSmaller(int []arr){
        Stack<Integer>st=new Stack<>();
        int []ans=new int[arr.length];

        for(int i=0;i<arr.length;i++){
            while(!st.isEmpty() && arr[i]<=arr[st.peek()]){
                st.pop();
            }
            if(st.isEmpty()){
                ans[i]=-1;
            }
            else{
                ans[i]=st.peek();
            }
            st.push(i);
        }
        return ans;

    }

    public int[] nextSmaller(int []arr){
        Stack<Integer>st=new Stack<>();
        int []ans=new int[arr.length];

        for(int i=arr.length-1;i>=0;i--){
            while(!st.isEmpty() && arr[i]<=arr[st.peek()]){
                st.pop();
            }
            if(st.isEmpty()){
                ans[i]=arr.length;
            }
            else{
                ans[i]=st.peek();
            }
            st.push(i);
        }
        return ans;

    }
}

//Stock Span 

class StockSpanner {
  Stack<int[]> s;
    public StockSpanner() {
        s = new Stack<>();
    }
    public int next(int price) {
        int span=1;
        while(!s.isEmpty() && price>=s.peek()[0]){
            span+=s.peek()[1];
            s.pop();
        }
        s.push(new int[]{price,span});
        return span;
    }
}

//Implement Min Stack
class MinStack {

    //public MinStack() {
        int min = Integer.MAX_VALUE;
        Stack<Integer> st = new Stack<>();
    ///}
    
    public void push(int x) {
      if(x <= min){          
            st.push(min);
            min=x;
        }
        st.push(x);
    }
    
    public void pop() {
         if(st.pop() == min)
          min=st.pop();
    }
    
    public int top() {
        return st.peek();
    }
    
    public int getMin() {
        return min;
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(val);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */


