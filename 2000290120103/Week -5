1-Validate BST implementation

#include <iostream>
#include <vector>

using namespace std;

struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;

    TreeNode(int val) : val(val), left(nullptr), right(nullptr) {}
};

// Function to insert a new node into a BST
TreeNode* insert(TreeNode* root, int val) {
    if (root == nullptr) {
        return new TreeNode(val);
    }

    if (val < root->val) {
        root->left = insert(root->left, val);
    } else if (val > root->val) {
        root->right = insert(root->right, val);
    }

    return root;
}

// Inorder traversal of the binary tree and store values in a vector
void inorderTraversal(TreeNode* root, vector<int>& values) {
    if (root == nullptr) {
        return;
    }

    inorderTraversal(root->left, values);
    values.push_back(root->val);
    inorderTraversal(root->right, values);
}

// Function to validate if the binary tree is a BST
bool isValidBST(TreeNode* root) {
    vector<int> values;
    inorderTraversal(root, values);

    for (int i = 1; i < values.size(); ++i) {
        if (values[i] <= values[i - 1]) {
            return false;
        }
    }

    return true;
}

// Function to delete the binary tree to avoid memory leaks
void deleteTree(TreeNode* root) {
    if (root == nullptr) {
        return;
    }

    deleteTree(root->left);
    deleteTree(root->right);
    delete root;
}

int main() {
    TreeNode* root = nullptr;
    int n, val;

    cout << "Enter the number of elements in the BST: ";
    cin >> n;

    cout << "Enter the elements of the BST: ";
    for (int i = 0; i < n; ++i) {
        cin >> val;
        root = insert(root, val);
    }

    if (isValidBST(root)) {
        cout << "The given binary tree is a valid BST." << endl;
    } else {
        cout << "The given binary tree is not a valid BST." << endl;
    }

    // Delete the binary tree to release memory
    deleteTree(root);

    return 0;
}

2-Post Order traversal 

#include <iostream>

using namespace std;
struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;

    TreeNode(int val) : val(val), left(nullptr), right(nullptr) {}
};

TreeNode* buildTree() {
    int val;
    cout << "Enter the node value (or -1 for null): ";
    cin >> val;

    if (val == -1) {
        return nullptr;
    }

    TreeNode* root = new TreeNode(val);
    root->left = buildTree();
    root->right = buildTree();

    return root;
}

// Function to perform postorder traversal of the binary tree
void postorderTraversal(TreeNode* root) {
    if (root == nullptr) {
        return;
    }

    postorderTraversal(root->left);
    postorderTraversal(root->right);
    cout << root->val << " ";
}

// Function to delete the binary tree to avoid memory leaks
void deleteTree(TreeNode* root) {
    if (root == nullptr) {
        return;
    }

    deleteTree(root->left);
    deleteTree(root->right);
    delete root;
}

int main() {
    TreeNode* root = buildTree();

    cout << "Postorder Traversal: ";
    postorderTraversal(root);
    cout << endl;

    // Delete the binary tree to release memory
    deleteTree(root);

    return 0;
}

3-Preorder traversal

#include <iostream>

using namespace std;
struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;

    TreeNode(int val) : val(val), left(nullptr), right(nullptr) {}
};

TreeNode* buildTree() {
    int val;
    cout << "Enter the node value (or -1 for null): ";
    cin >> val;

    if (val == -1) {
        return nullptr;
    }

    TreeNode* root = new TreeNode(val);
    root->left = buildTree();
    root->right = buildTree();

    return root;
}

// Function to perform preorder traversal of the binary tree
void preorderTraversal(TreeNode* root) {
    if (root == nullptr) {
        return;
    }

    cout << root->val << " ";
    preorderTraversal(root->left);
    preorderTraversal(root->right);
}

// Function to delete the binary tree to avoid memory leaks
void deleteTree(TreeNode* root) {
    if (root == nullptr) {
        return;
    }

    deleteTree(root->left);
    deleteTree(root->right);
    delete root;
}

int main() {
    TreeNode* root = buildTree();

    cout << "Preorder Traversal: ";
    preorderTraversal(root);
    cout << endl;

    // Delete the binary tree to release memory
    deleteTree(root);

    return 0;
}

4-Inorder traversal

#include <iostream>

using namespace std;
struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;

    TreeNode(int val) : val(val), left(nullptr), right(nullptr) {}
};

TreeNode* buildTree() {
    int val;
    cout << "Enter the node value (or -1 for null): ";
    cin >> val;

    if (val == -1) {
        return nullptr;
    }

    TreeNode* root = new TreeNode(val);
    root->left = buildTree();
    root->right = buildTree();

    return root;
}

// Function to perform inorder traversal of the binary tree
void inorderTraversal(TreeNode* root) {
    if (root == nullptr) {
        return;
    }

    inorderTraversal(root->left);
    cout << root->val << " ";
    inorderTraversal(root->right);
}

// Function to delete the binary tree to avoid memory leaks
void deleteTree(TreeNode* root) {
    if (root == nullptr) {
        return;
    }

    deleteTree(root->left);
    deleteTree(root->right);
    delete root;
}

int main() {
    TreeNode* root = buildTree();

    cout << "Inorder Traversal: ";
    inorderTraversal(root);
    cout << endl;

    // Delete the binary tree to release memory
    deleteTree(root);

    return 0;
}

5- Depth-First Search (DFS) implementation

#include <iostream>
#include <vector>
#include <unordered_set>

using namespace std;

// Function to perform DFS traversal on a graph
void dfs(int node, const vector<vector<int>>& adjList, vector<bool>& visited) {
    cout << node << " ";
    visited[node] = true;

    for (int neighbor : adjList[node]) {
        if (!visited[neighbor]) {
            dfs(neighbor, adjList, visited);
        }
    }
}

// Function to add an edge to the graph
void addEdge(vector<vector<int>>& adjList, int u, int v) {
    adjList[u].push_back(v);
    adjList[v].push_back(u);
}

// Function to delete the graph to avoid memory leaks
void deleteGraph(vector<vector<int>>& adjList) {
    for (auto& vec : adjList) {
        vec.clear();
    }
}

int main() {
    int numNodes, numEdges;
    cout << "Enter the number of nodes and edges: ";
    cin >> numNodes >> numEdges;

    vector<vector<int>> adjList(numNodes + 1);
    int u, v;
    cout << "Enter the edges (node1 node2): ";
    for (int i = 0; i < numEdges; ++i) {
        cin >> u >> v;
        addEdge(adjList, u, v);
    }

    int startNode;
    cout << "Enter the starting node for DFS traversal: ";
    cin >> startNode;

    vector<bool> visited(numNodes + 1, false);
    cout << "DFS traversal starting from node " << startNode << ": ";
    dfs(startNode, adjList, visited);
    cout << endl;

    // Delete the graph to release memory
    deleteGraph(adjList);

    return 0;
}

5- Breadth-First Search (BFS) implemenattion

#include <iostream>
#include <vector>
#include <queue>
#include <unordered_set>

using namespace std;

// Function to perform BFS traversal on a graph
void bfs(int startNode, const vector<vector<int>>& adjList, vector<bool>& visited) {
    queue<int> q;
    q.push(startNode);
    visited[startNode] = true;

    while (!q.empty()) {
        int current = q.front();
        cout << current << " ";
        q.pop();

        for (int neighbor : adjList[current]) {
            if (!visited[neighbor]) {
                q.push(neighbor);
                visited[neighbor] = true;
            }
        }
    }
}

// Function to add an edge to the graph
void addEdge(vector<vector<int>>& adjList, int u, int v) {
    adjList[u].push_back(v);
    adjList[v].push_back(u);
}

// Function to delete the graph to avoid memory leaks
void deleteGraph(vector<vector<int>>& adjList) {
    for (auto& vec : adjList) {
        vec.clear();
    }
}

int main() {
    int numNodes, numEdges;
    cout << "Enter the number of nodes and edges: ";
    cin >> numNodes >> numEdges;

    vector<vector<int>> adjList(numNodes + 1);
    int u, v;
    cout << "Enter the edges (node1 node2): ";
    for (int i = 0; i < numEdges; ++i) {
        cin >> u >> v;
        addEdge(adjList, u, v);
    }

    int startNode;
    cout << "Enter the starting node for BFS traversal: ";
    cin >> startNode;

    vector<bool> visited(numNodes + 1, false);
    cout << "BFS traversal starting from node " << startNode << ": ";
    bfs(startNode, adjList, visited);
    cout << endl;

    // Delete the graph to release memory
    deleteGraph(adjList);

    return 0;
}

6-Level Order Traversal in binary tree

#include <iostream>
#include <queue>

using namespace std;

// Definition for a binary tree node
struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;

    TreeNode(int val) : val(val), left(nullptr), right(nullptr) {}
};

// Function to build a binary tree from user input
TreeNode* buildTree() {
    int val;
    cout << "Enter the node value (or -1 for null): ";
    cin >> val;

    if (val == -1) {
        return nullptr;
    }

    TreeNode* root = new TreeNode(val);
    root->left = buildTree();
    root->right = buildTree();

    return root;
}

// Function to perform level order traversal of the binary tree
void levelOrderTraversal(TreeNode* root) {
    if (root == nullptr) {
        return;
    }

    queue<TreeNode*> q;
    q.push(root);

    while (!q.empty()) {
        TreeNode* current = q.front();
        q.pop();

        cout << current->val << " ";

        if (current->left != nullptr) {
            q.push(current->left);
        }
        if (current->right != nullptr) {
            q.push(current->right);
        }
    }
}

// Function to delete the binary tree to avoid memory leaks
void deleteTree(TreeNode* root) {
    if (root == nullptr) {
        return;
    }

    deleteTree(root->left);
    deleteTree(root->right);
    delete root;
}

int main() {
    TreeNode* root = buildTree();

    cout << "Level Order Traversal: ";
    levelOrderTraversal(root);
    cout << endl;

    // Delete the binary tree to release memory
    deleteTree(root);

    return 0;
}

// SDE sheet solution
//Tree and graph

//tree

1-Morris Inorder Traversal of a Binary tree

vector < int > inorderTraversal(node * root) {
  vector < int > inorder;

  node * cur = root;
  while (cur != NULL) {
    if (cur -> left == NULL) {
      inorder.push_back(cur -> data);
      cur = cur -> right;
    } else {
      node * prev = cur -> left;
      while (prev -> right != NULL && prev -> right != cur) {
        prev = prev -> right;
      }

      if (prev -> right == NULL) {
        prev -> right = cur;
        cur = cur -> left;
      } else {
        prev -> right = NULL;
        inorder.push_back(cur -> data);
        cur = cur -> right;
      }
    }
  }
  return inorder;
}

struct node * newNode(int data) {
  struct node * node = (struct node * ) malloc(sizeof(struct node));
  node -> data = data;
  node -> left = NULL;
  node -> right = NULL;

  return (node);
}

2-Morris Preorder Traversal of a Binary Tree

vector < int > preorderTraversal(node * root) {
  vector < int > preorder;

  node * cur = root;
  while (cur != NULL) {
    if (cur -> left == NULL) {
      preorder.push_back(cur -> data);
      cur = cur -> right;
    } else {
      node * prev = cur -> left;
      while (prev -> right != NULL && prev -> right != cur) {
        prev = prev -> right;
      }

      if (prev -> right == NULL) {
        prev -> right = cur;
        preorder.push_back(cur -> data);
        cur = cur -> left;
      } else {
        prev -> right = NULL;
        cur = cur -> right;
      }
    }
  }
  return preorder;
}

struct node * newNode(int data) {
  struct node * node = (struct node * ) malloc(sizeof(struct node));
  node -> data = data;
  node -> left = NULL;
  node -> right = NULL;

  return (node);
}

3-Left view of binary tree

class Solution {
public:
    void recursion(TreeNode *root, int level, vector<int> &res)
    {
        if(root==NULL) return ;
        if(res.size()==level) res.push_back(root->val);
        recursion(root->left, level+1, res);
        recursion(root->right, level+1, res);
    }
    
    vector<int> leftSideView(TreeNode *root) {
        vector<int> res;
        recursion(root, 0, res);
        return res;
    }
};

4-Right view of binary tree

class Solution {
public:
    void recursion(TreeNode *root, int level, vector<int> &res)
    {
        if(root==NULL) return ;
        if(res.size()==level) res.push_back(root->val);
        recursion(root->right, level+1, res);
        recursion(root->left, level+1, res);
    }
    
    vector<int> rightSideView(TreeNode *root) {
        vector<int> res;
        recursion(root, 0, res);
        return res;
    }
};

//Graph

1-Detect Cycle in an Undirected Graph (using BFS)

class Solution {
  private: 
  bool detect(int src, vector<int> adj[], int vis[]) {
      vis[src] = 1; 
      // store <source node, parent node>
      queue<pair<int,int>> q; 
      q.push({src, -1}); 
      // traverse until queue is not empty
      while(!q.empty()) {
          int node = q.front().first; 
          int parent = q.front().second; 
          q.pop(); 
          
          // go to all adjacent nodes
          for(auto adjacentNode: adj[node]) {
              // if adjacent node is unvisited
              if(!vis[adjacentNode]) {
                  vis[adjacentNode] = 1; 
                  q.push({adjacentNode, node}); 
              }
              // if adjacent node is visited and is not it's own parent node
              else if(parent != adjacentNode) {
                  // yes it is a cycle
                  return true; 
              }
          }
      }
      // there's no cycle
      return false; 
  }
  public:
    // Function to detect cycle in an undirected graph.
    bool isCycle(int V, vector<int> adj[]) {
        // initialise them as unvisited 
        int vis[V] = {0};
        for(int i = 0;i<V;i++) {
            if(!vis[i]) {
                if(detect(i, adj, vis)) return true; 
            }
        }
        return false; 
    }
};

2-Detect Cycle in an Undirected Graph (using DFS)


class Solution {
  private: 
    bool dfs(int node, int parent, int vis[], vector<int> adj[]) {
        vis[node] = 1; 
        // visit adjacent nodes
        for(auto adjacentNode: adj[node]) {
            // unvisited adjacent node
            if(!vis[adjacentNode]) {
                if(dfs(adjacentNode, node, vis, adj) == true) 
                    return true; 
            }
            // visited node but not a parent node
            else if(adjacentNode != parent) return true; 
        }
        return false; 
    }
  public:
    // Function to detect cycle in an undirected graph.
    bool isCycle(int V, vector<int> adj[]) {
       int vis[V] = {0}; 
       // for graph with connected components 
       for(int i = 0;i<V;i++) {
           if(!vis[i]) {
               if(dfs(i, -1, vis, adj) == true) return true; 
           }
       }
       return false; 
    }
};
