class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
     List<List<Integer>> edges = new ArrayList<>();
int[] degrees = new int[numCourses];
for (int i = 0; i < numCourses; i++) {
edges.add(new ArrayList<>());
    System.out.println(edges);
}
for (int[] prerequisite : prerequisites) {
int course = prerequisite[0];
int preCourse = prerequisite[1];
edges.get(preCourse).add(course);
degrees[course]++;
}
Queue<Integer> queue = new LinkedList<>();
for (int course = 0; course < numCourses; course++) {
if (degrees[course] == 0) {
queue.add(course);
}
}
while (!queue.isEmpty()) {
int course = queue.poll();
for (int nextCourse : edges.get(course)) {
degrees[nextCourse]--;
if (degrees[nextCourse] == 0) {
queue.add(nextCourse);
}
}
}
for (int degree : degrees) {
if (degree != 0) {
return false;
}
}
return true;
}
}
