import java.util.ArrayList;

public class Solution {    public static void dfs    (int node, ArrayList<ArrayList<Integer>> adj ,     ArrayList<Integer> ds , boolean[] visited){        visited[node] = true;        ds.add(node);        for(int i : adj.get(node)){            if(visited[i] == false){                dfs(i , adj , ds , visited);            }        }

   }    public static ArrayList<ArrayList<Integer>> depthFirstSearch    (int v, int e, ArrayList<ArrayList<Integer>> edges) {        // Write your code here.        boolean[] visited = new boolean[v];        ArrayList<ArrayList<Integer>> res = new ArrayList<ArrayList<Integer>>();

       ArrayList<ArrayList<Integer>> adj = new ArrayList<ArrayList<Integer>>();        for(int i = 0 ; i < v; i++){            adj.add(new ArrayList<Integer>());        }

       for (int i = 0 ; i < edges.size() ; i++){            int x = edges.get(i).get(0);            int y = edges.get(i).get(1);            adj.get(x).add(y);            adj.get(y).add(x);        }        for(int i = 0 ; i < v ; i++){            if(visited[i] == false){                ArrayList<Integer> ds = new ArrayList<>();                dfs(i , adj , ds , visited);                res.add(ds);            }        }        return res;    } }
